import java.awt.*;
import java.awt.event.*;
import java.security.SecureRandom;

class CustomPasswordGeneratorApp extends Frame {
    private TextField upperField, lowerField, numberField, symbolField, passwordField;

    public CustomPasswordGeneratorApp() {
        // Set up the frame
        setTitle("Custom Password Generator");
        setSize(500, 300);
        setLayout(new FlowLayout());
        setResizable(false);
        setBackground(new Color(255, 228, 225)); // Light pink background

        // Add input fields and labels for character counts
        add(new Label("Uppercase Letters:"));
        upperField = new TextField(5);
        add(upperField);

        add(new Label("Lowercase Letters:"));
        lowerField = new TextField(5);
        add(lowerField);

        add(new Label("Numbers:"));
        numberField = new TextField(5);
        add(numberField);

        add(new Label("Symbols:"));
        symbolField = new TextField(5);
        add(symbolField);

        // Add a button to generate the password
        Button generateButton = new Button("Generate Password");
        generateButton.setBackground(new Color(173, 216, 230)); // Light blue button
        generateButton.setForeground(Color.BLACK); // Black text
        add(generateButton);

        // Add a text field to display the generated password
        add(new Label("Generated Password:"));
        passwordField = new TextField(30);
        passwordField.setEditable(false);
        add(passwordField);

        // Add an action listener to the button
        generateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    int upper = Integer.parseInt(upperField.getText());
                    int lower = Integer.parseInt(lowerField.getText());
                    int numbers = Integer.parseInt(numberField.getText());
                    int symbols = Integer.parseInt(symbolField.getText());
                    String password = generateCustomPassword(upper, lower, numbers, symbols);
                    passwordField.setText(password);
                } catch (NumberFormatException ex) {
                    passwordField.setText("Invalid input! Enter numbers only.");
                } catch (IllegalArgumentException ex) {
                    passwordField.setText(ex.getMessage());
                }
            }
        });

        // Add a window listener to close the application
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });
    }

    public static void main(String[] args) {
        CustomPasswordGeneratorApp app = new CustomPasswordGeneratorApp();
        app.setVisible(true);
    }

    public static String generateCustomPassword(int upper, int lower, int numbers, int symbols) {
        // Validate the inputs
        if (upper < 0 || lower < 0 || numbers < 0 || symbols < 0) {
            throw new IllegalArgumentException("Counts must not be negative.");
        }
        int total = upper + lower + numbers + symbols;
        if (total == 0) {
            throw new IllegalArgumentException("Total characters must be greater than zero.");
        }

        // Define character pools
        String upperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lowerCase = "abcdefghijklmnopqrstuvwxyz";
        String numPool = "0123456789";
        String symbolPool = "!@#$%^&*()-_=+<>?";

        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();

        // Generate specified counts of characters
        for (int i = 0; i < upper; i++) {
            password.append(upperCase.charAt(random.nextInt(upperCase.length())));
        }
        for (int i = 0; i < lower; i++) {
            password.append(lowerCase.charAt(random.nextInt(lowerCase.length())));
        }
        for (int i = 0; i < numbers; i++) {
            password.append(numPool.charAt(random.nextInt(numPool.length())));
        }
        for (int i = 0; i < symbols; i++) {
            password.append(symbolPool.charAt(random.nextInt(symbolPool.length())));
        }

        // Shuffle the password to ensure randomness
        return shuffleString(password.toString(), random);
    }

    public static String shuffleString(String input, SecureRandom random) {
        char[] characters = input.toCharArray();
        for (int i = characters.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            // Swap characters[i] with characters[j]
            char temp = characters[i];
            characters[i] = characters[j];
            characters[j] = temp;
        }
        return new String(characters);
    }
}
